plugins {
  id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'application'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'

dependencies {
  compile 'org.jetbrains.kotlin:kotlin-stdlib:1.1.0'
  compile 'commons-cli:commons-cli:1.3.1'
  compile 'com.github.prt2121:kpop-core:0.1.1'
  //compile project(':kpop-core')
}

def pomConfig = {
  licenses {
    license {
      name "The Apache Software License, Version 2.0"
      url "http://www.apache.org/licenses/LICENSE-2.0.txt"
      distribution "repo"
    }
  }
  scm {
    url 'git@github.com:prt2121/kpop.git'
    connection 'scm:git@github.com:prt2121/kpop.git'
    developerConnection 'scm:git@github.com:prt2121/kpop.git'
  }
  developers {
    developer {
      id "prt2121"
      name "Prat Tanapaisankit"
      email "prt2121@users.noreply.github.com"
    }
  }
}

mainClassName = 'com.prt2121.kpop.Main'

jar {
  manifest {
    attributes 'Main-Class': mainClassName
  }
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

publishing {
  publications {
    MyPublication(MavenPublication) {
      groupId 'com.github.prt2121'
      artifactId 'kpop-cli'
      version '0.1.1'

      from components.java

      artifact sourcesJar
      artifact javadocJar

      pom.withXml {
        def root = asNode()
        root.appendNode('description', 'cli for generating Kotlin extensions from Java static methods')
        root.appendNode('name', 'kpop-cli')
        root.appendNode('url', 'https://github.com/prt2121/kpop')
        root.children().last() + pomConfig
      }
    }
  }
}

bintray {
  user = 'prt2121'
  key = ''
  publications = ['MyPublication']
  pkg {
    repo = 'maven'
    name = 'kpop-cli'
    licenses = ['Apache-2.0']
    vcsUrl = 'https://github.com/prt2121/kpop.git'
    version {
      name = '0.1.1'
      desc = 'kpop cli 0.1.1'
      released  = new Date()
      vcsTag = '0.1.1'

      gpg {
        sign = true
        passphrase = ''
      }
      mavenCentralSync {
        sync = true
        user = 'prt2121' //OSS user token
        password = '' //OSS user password
      }
    }
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar, javadocJar
}
